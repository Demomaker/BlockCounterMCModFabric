name: Build and Publish Minecraft Fabric Mod

on:
  push:
    paths:
      - gradle.properties
      - src/main/resources/fabric.mod.json
  workflow_dispatch:  # Allows manual triggering

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up JDK 21
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '21'

    - name: Cache Gradle packages
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build

    - name: Archive build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: build/libs/*.jar

  publish:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: ./build/libs/

    - name: Read gradle.properties and set VERSION
      id: read_properties
      run: |
        game_version=$(grep 'minecraft_version=' gradle.properties | cut -d'=' -f2)
        echo "game_version=$game_version" >> $GITHUB_ENV
        version=$(grep 'mod_version = ' gradle.properties | cut -d'=' -f2 | tr -d '[:space:]')
        echo "version=$version" >> $GITHUB_ENV  # Set VERSION variable explicitly
        archives_base_name=$(grep 'archives_base_name = ' gradle.properties | cut -d'=' -f2 | tr -d '[:space:]')
        echo "archives_base_name=$archives_base_name" >> $GITHUB_ENV  # Set MOD_NAME variable explicitly

    - name: Read fabric.mod.json and set VERSION
      id: read_fabric_mod_json
      run: |
        mod_name=$(jq -r '.name' src/main/resources/fabric.mod.json)
        echo "mod_name=$mod_name" >> $GITHUB_ENV

    - name: Debug environment variables and files
      run: |
        echo "MOD_NAME: ${{ env.mod_name }}"
        echo "ARCHIVES_BASE_NAME: ${{ env.archives_base_name }}"
        echo "VERSION: ${{ env.version }}"
        echo "GAME_VERSION: ${{ env.game_version }}"
        ls -l ./build/libs/

    - name: Prepare JSON data
      id: prepare_json
      env:
        MOD_NAME: ${{ env.mod_name }}
        VERSION: ${{ env.version }}
        GAME_VERSION: ${{ env.game_version }}
        ARCHIVES_BASE_NAME: ${{ env.archives_base_name }}
      run: |
        jq -n --arg name "$MOD_NAME Mod $VERSION" \
              --arg version_number "$VERSION" \
              --argjson dependencies '[]' \
              --argjson game_versions '["'$GAME_VERSION'"]' \
              --arg version_type "release" \
              --argjson loaders '["fabric"]' \
              --arg featured "true" \
              --arg file_parts "./build/libs/$ARCHIVES_BASE_NAME-$VERSION.jar" \
              --arg changelog "Release $VERSION" \
              --arg release_channel "stable" \
              '{
                name: $name,
                version_number: $version_number,
                dependencies: $dependencies,
                game_versions: $game_versions,
                version_type: $version_type,
                loaders: $loaders,
                featured: $featured,
                file_parts: [$file_parts],
                changelog: $changelog,
                release_channel: $release_channel
              }' > modrinth_data.json

    - name: Check modrinth_data.json
      run: cat modrinth_data.json || echo "modrinth_data.json not found or empty"

    - name: Check built jar files
      run: ls -l ./build/libs/ || echo "No files found in ./build/libs/"

    - name: Publish to Modrinth
      env:
        MODRINTH_TOKEN: ${{ secrets.MODRINTH_TOKEN }}  # Ensure this secret is added to your GitHub repository
        ARCHIVES_BASE_NAME: ${{ env.archives_base_name }}
        MOD_NAME: ${{ env.mod_name }}
        VERSION: ${{ env.version }}
      run: |
        echo "Publishing $ARCHIVES_BASE_NAME-$VERSION.jar"
        curl -X POST https://api.modrinth.com/v2/project/blockcounter/version \
        -H "Authorization: Bearer $MODRINTH_TOKEN" \
        -H "Content-Type: multipart/form-data" \
        -F "data=@modrinth_data.json;type=application/json" \
        -F "file=@./build/libs/$ARCHIVES_BASE_NAME-$VERSION.jar"
